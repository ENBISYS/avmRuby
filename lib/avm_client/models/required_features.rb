=begin
#AVM

#This is api for AVM (automated valuation machine)

The version of the AvmClient document: 1.0.0
Contact: info@enbisys.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.3

=end

require 'date'

module AvmClient
  class RequiredFeatures
    # Postcode
    attr_accessor :postcode

    attr_accessor :new_or_resale

    attr_accessor :floor_level

    # Floor area (sqf)
    attr_accessor :total_floor_area_in_sqf

    attr_accessor :property_type

    attr_accessor :number_of_rooms

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'postcode' => :'postcode',
        :'new_or_resale' => :'newOrResale',
        :'floor_level' => :'floorLevel',
        :'total_floor_area_in_sqf' => :'totalFloorAreaInSqf',
        :'property_type' => :'propertyType',
        :'number_of_rooms' => :'numberOfRooms'
      }
    end

    # Attribute type mapping.
    def self.avm_types
      {
        :'postcode' => :'String',
        :'new_or_resale' => :'NewOrResale',
        :'floor_level' => :'FloorLevel',
        :'total_floor_area_in_sqf' => :'Integer',
        :'property_type' => :'PropertyType',
        :'number_of_rooms' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AvmClient::RequiredFeatures` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AvmClient::RequiredFeatures`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.key?(:'new_or_resale')
        self.new_or_resale = attributes[:'new_or_resale']
      end

      if attributes.key?(:'floor_level')
        self.floor_level = attributes[:'floor_level']
      end

      if attributes.key?(:'total_floor_area_in_sqf')
        self.total_floor_area_in_sqf = attributes[:'total_floor_area_in_sqf']
      end

      if attributes.key?(:'property_type')
        self.property_type = attributes[:'property_type']
      end

      if attributes.key?(:'number_of_rooms')
        self.number_of_rooms = attributes[:'number_of_rooms']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @postcode.nil?
        invalid_properties.push('invalid value for "postcode", postcode cannot be nil.')
      end

      if @new_or_resale.nil?
        invalid_properties.push('invalid value for "new_or_resale", new_or_resale cannot be nil.')
      end

      if @floor_level.nil?
        invalid_properties.push('invalid value for "floor_level", floor_level cannot be nil.')
      end

      if @total_floor_area_in_sqf.nil?
        invalid_properties.push('invalid value for "total_floor_area_in_sqf", total_floor_area_in_sqf cannot be nil.')
      end

      if @total_floor_area_in_sqf > 10000
        invalid_properties.push('invalid value for "total_floor_area_in_sqf", must be smaller than or equal to 10000.')
      end

      if @total_floor_area_in_sqf < 50
        invalid_properties.push('invalid value for "total_floor_area_in_sqf", must be greater than or equal to 50.')
      end

      if @property_type.nil?
        invalid_properties.push('invalid value for "property_type", property_type cannot be nil.')
      end

      if @number_of_rooms.nil?
        invalid_properties.push('invalid value for "number_of_rooms", number_of_rooms cannot be nil.')
      end

      if @number_of_rooms > 9
        invalid_properties.push('invalid value for "number_of_rooms", must be smaller than or equal to 9.')
      end

      if @number_of_rooms < 1
        invalid_properties.push('invalid value for "number_of_rooms", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @postcode.nil?
      return false if @new_or_resale.nil?
      return false if @floor_level.nil?
      return false if @total_floor_area_in_sqf.nil?
      return false if @total_floor_area_in_sqf > 10000
      return false if @total_floor_area_in_sqf < 50
      return false if @property_type.nil?
      return false if @number_of_rooms.nil?
      return false if @number_of_rooms > 9
      return false if @number_of_rooms < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] total_floor_area_in_sqf Value to be assigned
    def total_floor_area_in_sqf=(total_floor_area_in_sqf)
      if total_floor_area_in_sqf.nil?
        fail ArgumentError, 'total_floor_area_in_sqf cannot be nil'
      end

      if total_floor_area_in_sqf > 10000
        fail ArgumentError, 'invalid value for "total_floor_area_in_sqf", must be smaller than or equal to 10000.'
      end

      if total_floor_area_in_sqf < 50
        fail ArgumentError, 'invalid value for "total_floor_area_in_sqf", must be greater than or equal to 50.'
      end

      @total_floor_area_in_sqf = total_floor_area_in_sqf
    end

    # Custom attribute writer method with validation
    # @param [Object] number_of_rooms Value to be assigned
    def number_of_rooms=(number_of_rooms)
      if number_of_rooms.nil?
        fail ArgumentError, 'number_of_rooms cannot be nil'
      end

      if number_of_rooms > 9
        fail ArgumentError, 'invalid value for "number_of_rooms", must be smaller than or equal to 9.'
      end

      if number_of_rooms < 1
        fail ArgumentError, 'invalid value for "number_of_rooms", must be greater than or equal to 1.'
      end

      @number_of_rooms = number_of_rooms
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          postcode == o.postcode &&
          new_or_resale == o.new_or_resale &&
          floor_level == o.floor_level &&
          total_floor_area_in_sqf == o.total_floor_area_in_sqf &&
          property_type == o.property_type &&
          number_of_rooms == o.number_of_rooms
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [postcode, new_or_resale, floor_level, total_floor_area_in_sqf, property_type, number_of_rooms].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.avm_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AvmClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
